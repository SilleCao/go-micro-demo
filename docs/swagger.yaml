basePath: /api/v1
definitions:
  dto.CreateSysUserRequest:
    properties:
      deptId:
        description: 部门ID
        type: integer
      email:
        description: 邮箱
        type: string
      gender:
        description: 性别   0：男   1：女    2：保密
        type: integer
      headUrl:
        description: 头像
        type: string
      mobile:
        description: 手机号
        type: string
      password:
        description: 密码
        type: string
      realName:
        description: 姓名
        type: string
      username:
        description: 用户名
        type: string
    type: object
  dto.SysMenuRequest:
    properties:
      icon:
        description: 菜单图标
        type: string
      name:
        description: 名称
        type: string
      permissions:
        description: 授权(多个用逗号分隔，如：sys:user:list,sys:user:save)
        type: string
      pid:
        description: 上级ID，一级菜单为0
        type: integer
      sort:
        description: 排序
        type: integer
      type:
        description: 类型   0：菜单   1：按钮
        type: integer
      url:
        description: 菜单URL
        type: string
    type: object
  dto.SysRoleRequest:
    properties:
      deptId:
        description: 部门ID
        type: integer
      name:
        description: 角色名称
        type: string
      remark:
        description: 备注
        type: string
    type: object
  dto.UpdateSysUserRequest:
    properties:
      deptId:
        description: 部门ID
        type: integer
      email:
        description: 邮箱
        type: string
      gender:
        description: 性别   0：男   1：女    2：保密
        type: integer
      headUrl:
        description: 头像
        type: string
      id:
        description: id
        type: integer
      mobile:
        description: 手机号
        type: string
      realName:
        description: 姓名
        type: string
      status:
        description: 状态 -1 Deteled 0：停用   1：正常
        type: integer
      superAdmin:
        description: 状态 -1 Deteled 0：停用   1：正常
        type: integer
      username:
        description: 用户名
        type: string
    type: object
  dto.UpdateSysUserStatusRequest:
    properties:
      id:
        description: id
        type: integer
      status:
        description: 状态 -1 Deteled 0：停用   1：正常
        type: integer
    type: object
  model.Credentials:
    properties:
      password:
        example: "111000"
        type: string
      username:
        example: admin
        type: string
    type: object
host: localhost:7081
info:
  contact:
    email: caoliang1025@163.com
    name: Sille Cao
  description: A demo service in Go using Gin framework
  termsOfService: https://sille.cn
  title: Go Micro Demo
  version: "1.0"
paths:
  /auth/token:
    post:
      description: Authenicate login user and return token
      parameters:
      - description: Credentials JSON
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/model.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Generate token
      tags:
      - auth
  /sys/menus:
    delete:
      description: Delete Menu
      parameters:
      - description: menu id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete Menu
      tags:
      - sys/menu
    get:
      description: Get the list of Menu
      parameters:
      - description: menu name
        in: query
        name: name
        type: string
      - description: menu url
        in: query
        name: url
        type: string
      - description: parent menu id
        in: query
        name: pid
        type: string
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Get Menus
      tags:
      - sys/menu
    post:
      description: Create the new menu
      parameters:
      - description: SysMenuRequest JSON
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/dto.SysMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Create Menu
      tags:
      - sys/menu
    put:
      description: Update the menu
      parameters:
      - description: menu id
        in: path
        name: id
        type: integer
      - description: SysMenuRequest JSON
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/dto.SysMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Update Menu
      tags:
      - sys/menu
  /sys/roles:
    delete:
      description: Delete Role
      parameters:
      - description: role id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete Role
      tags:
      - sys/role
    get:
      description: Get the list of Role
      parameters:
      - description: role name
        in: query
        name: name
        type: string
      - description: role remark
        in: query
        name: remark
        type: string
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Get Roles
      tags:
      - sys/role
    post:
      description: Create the new role
      parameters:
      - description: SysRoleRequest JSON
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.SysRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Create Role
      tags:
      - sys/role
    put:
      description: Update the role
      parameters:
      - description: role id
        in: path
        name: id
        type: integer
      - description: SysRoleRequest JSON
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.SysRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Update Role
      tags:
      - sys/role
  /sys/users:
    get:
      description: Get users
      parameters:
      - description: username
        in: query
        name: username
        type: string
      - description: real name
        in: query
        name: realName
        type: string
      - description: email
        in: query
        name: email
        type: string
      - description: mobile
        in: query
        name: mobile
        type: string
      - description: gender
        in: query
        name: gender
        type: integer
      - description: super admin
        in: query
        name: superAdmin
        type: integer
      - description: status
        in: query
        name: status
        type: integer
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: GetUsers
      tags:
      - sys/user
    post:
      description: Create the new user
      parameters:
      - description: CreateSysUserRequest JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSysUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - sys/user
    put:
      description: Update user
      parameters:
      - description: UpdateSysUserRequest JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSysUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: UpdateUser
      tags:
      - sys/user
  /sys/users/{id}:
    get:
      description: Get user by id
      parameters:
      - description: user id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: GetUserById
      tags:
      - sys/user
  /sys/users/status:
    put:
      description: Update user's status
      parameters:
      - description: UpdateSysUserStatusRequest JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSysUserStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: UpdateUserStatus
      tags:
      - sys/user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
