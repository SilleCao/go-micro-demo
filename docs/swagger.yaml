basePath: /api/v1
definitions:
  dto.UpdateUserStatusDTO:
    properties:
      id:
        description: id
        type: integer
      status:
        description: 状态 -1 Deteled 0：停用   1：正常
        type: integer
    type: object
  model.Credentials:
    properties:
      password:
        example: "111000"
        type: string
      username:
        example: admin
        type: string
    type: object
  model.SysRole:
    properties:
      createDate:
        description: 创建时间
        type: string
      creator:
        description: 创建者
        type: integer
      deptId:
        description: 部门ID
        type: integer
      id:
        description: id
        type: integer
      name:
        description: 角色名称
        type: string
      remark:
        description: 备注
        type: string
      updateDate:
        description: 更新时间
        type: string
      updater:
        description: 更新者
        type: integer
    type: object
  model.SysUser:
    properties:
      createDate:
        description: 创建时间
        type: string
      creator:
        description: 创建者
        type: integer
      deptId:
        description: 部门ID
        type: integer
      email:
        description: 邮箱
        type: string
      gender:
        description: 性别   0：男   1：女    2：保密
        type: integer
      headUrl:
        description: 头像
        type: string
      id:
        description: id
        type: integer
      mobile:
        description: 手机号
        type: string
      realName:
        description: 姓名
        type: string
      status:
        description: 状态  0：停用   1：正常
        type: integer
      superAdmin:
        description: 超级管理员   0：否   1：是
        type: integer
      updateDate:
        description: 更新时间
        type: string
      updater:
        description: 更新者
        type: integer
      username:
        description: 用户名
        type: string
    type: object
host: localhost:7081
info:
  contact:
    email: caoliang1025@163.com
    name: Sille Cao
  description: A demo service in Go using Gin framework
  termsOfService: https://sille.cn
  title: Go Micro Demo
  version: "1.0"
paths:
  /auth/token:
    post:
      description: Authenicate login user and return token
      parameters:
      - description: Credentials JSON
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/model.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Generate token
      tags:
      - auth
  /sys/roles:
    delete:
      description: Delete Role
      parameters:
      - description: role id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Delete Role
      tags:
      - sys/role
    get:
      description: Get the list of Role
      parameters:
      - description: role name
        in: query
        name: name
        type: string
      - description: role remark
        in: query
        name: remark
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Get Roles
      tags:
      - sys/role
    post:
      description: Create the new role
      parameters:
      - description: SysRole JSON
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.SysRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Create Role
      tags:
      - sys/role
    put:
      description: Update the role
      parameters:
      - description: role id
        in: path
        name: id
        type: integer
      - description: SysRole JSON
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.SysRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Update Role
      tags:
      - sys/role
  /sys/users:
    get:
      description: Get users
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: GetUsers
      tags:
      - sys/user
    post:
      description: Create the new user
      parameters:
      - description: SysUser JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.SysUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - sys/user
    put:
      description: Update user
      parameters:
      - description: user id
        in: path
        name: id
        type: integer
      - description: SysUser JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.SysUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: UpdateUser
      tags:
      - sys/user
  /sys/users/{id}:
    get:
      description: Get user by id
      parameters:
      - description: user id
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: GetUserById
      tags:
      - sys/user
  /sys/users/status:
    put:
      description: Update user's status
      parameters:
      - description: UpdateUserStatusDTO JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserStatusDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: UpdateUserStatus
      tags:
      - sys/user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
